name: REUSABLE-ECR Push Workflow
on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      #AWS_SESSION_TOKEN:
      #  required: true
      #AWS_REGION:
      #  required: true
    inputs:
      AWS_REGION:
        required: true
        type: string
        default: 'us-east-1'
      EKS_CLUSTER_NAME:
        required: true
        type: string
      ENVIRONMENT:
        required: true
        type: string
      IMAGE:
        required: true
        type: string
      ## NOTE: It is assumed namespace is the same as the service name
      SERVICE_NAME:
        required: true
        type: string

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          #aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ inputs.AWS_REGION }}
          #role-to-assume: arn:aws:iam::123456789012:role/my-githubactions-role
          role-duration-seconds: 1200
          role-session-name: GitHubActions-EKSDeploy
          role-skip-session-tagging: true

      ## Install kubectl
      #- name: "Install kubectl" 
      #  id: install-kubectl
      #  uses: azure/setup-kubectl@v3
      #  with:
      #    version: latest

      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ inputs.EKS_CLUSTER_NAME }} --region ${{ inputs.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          for file in manifests/*.yaml; do
            echo "Processing $file..."
            sed -i -e "s|DOCKER_IMAGE|${{ inputs.IMAGE }}|g" "$file"
            kubectl apply -f $file
          done
          ##sed -i.bak "s|DOCKER_IMAGE|${{ inputs.IMAGE }}|g" manifests/*.yaml && \
          ##kubectl apply -f manifests/*.yaml
          ## ^^ Note this does not guarantee order of apply... 

      ## Add a 'validate step here to check the deployment status' - I'm just checking for a LoadBalancer URL
      - name: Fetch Application URL
        run: |
          # Give time for service to be provisioned
          sleep 5
          # Loop until we get a URL
          while :;do url=$(kubectl get service/${{ inputs.SERVICE_NAME }} -n ${{ inputs.SERVICE_NAME }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}');[ -z "$url" ]&&{ echo "URL is empty, retrying in 5 seconds...";sleep 5;}||{ export APP_URL="$url";echo "APP_URL set to: $APP_URL";break;};done;echo "APP_URL=$APP_URL">>$GITHUB_ENV
          # Ingress Example:
          #while :;do url=$(kubectl get ingress/${{ inputs.SERVICE_NAME }} -n ${{ inputs.SERVICE_NAME }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}');[ -z "$url" ]&&{ echo "URL is empty, retrying in 5 seconds...";sleep 5;}||{ export APP_URL="$url";echo "APP_URL set to: $APP_URL";break;};done;echo "APP_URL=$APP_URL">>$GITHUB_ENV

  ## Azure Example: https://github.com/marketplace/actions/kubernetes-bake
    ## Bakes a Helm chart and deploys it to a Kubernetes cluster
    ## https://github.com/Azure/k8s-deploy

