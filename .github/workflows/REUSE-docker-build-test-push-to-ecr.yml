name: REUSABLE-ECR Push Workflow
on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      #AWS_SESSION_TOKEN:
      #  required: true
      #AWS_REGION:
      #  required: true
    inputs:
      AWS_REGION:
        required: true
        type: string
        default: 'us-east-1'
    outputs:
      image:
        description: "The Docker image pushed to ECR"
        value: ${{ jobs.build-and-push.outputs.image }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    outputs:
      image: ${{ steps.build-and-push.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          #aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ inputs.AWS_REGION }}
          #role-to-assume: arn:aws:iam::123456789012:role/my-githubactions-role
          role-duration-seconds: 1200
          role-session-name: GitHubActions-ECRPush
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      ## Note this repository needs to already exist in ECR 
      ## That may be good for least privilege in a workflow
      ## You could have this create if it doesn't exist... 

      - name: Build, tag, and push image to Amazon ECR
        id: build-and-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

## Amazon Inspector Scan Action
## https://github.com/marketplace/actions/vulnerability-scan-github-action-for-amazon-inspector
    ## But you could use others like Trivy, Grype...
    ## Ideally do this after build and prior to image push 
